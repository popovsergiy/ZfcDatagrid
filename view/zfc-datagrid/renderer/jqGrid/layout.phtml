<?php 
use ZfcDatagrid\Column\Action\Button;
use ZfcDatagrid\Filter;

/* @var $paginator \Zend\Paginator\Paginator */
$paginator = $this->paginator;

$parameterNames = $this->optionsRenderer['parameterNames'];

$url = $this->url(null, array(), array(), true);
if($this->overwriteUrl != ''){
    $url = $this->overwriteUrl;
}
$parametersHtml = array();
foreach($this->parameters as $name => $value){
    $parametersHtml []= $name.': \''.$value.'\'';
}

$tableClasses = array();
$rowClickLink = '';

if($this->rowClickAction){
    $tableClasses[] = 'clickable';
    
    $rowClickLink = $this->rowClickAction->getLink();
    if(count($this->rowClickAction->getLinkColumnPlaceholders()) > 0){
        throw new \Exception('Currently the row click action cannot bet used with Column parameters, except the rowId...');
    }
}

/*
 * Column - background-color
 */
$styleString = '';
foreach($this->columns as $col){
    /* @var $col \ZfcDatagrid\Column\AbstractColumn */
    foreach ($col->getStyles() as $style) {

        switch (get_class($style)) {

            case 'ZfcDatagrid\Column\Style\BackgroundColor':
                $css = '$(\'#\' + row.idConcated).find(\'td[aria-describedby=' . $this->gridId . '_' . $col->getUniqueId() . ']\').css(\'background-color\', \'#'.$style->getRgbHexString().'\');';
                if ($style->hasByValues() === true) {
                    foreach ($style->getByValues() as $rule) {
                        $colString = $rule['column']->getUniqueId();
                        $operator = '';
                        switch ($rule['operator']) {

                            case Filter::EQUAL:
                                $operator = '==';
                                break;

                            case Filter::NOT_EQUAL:
                                $operator = '!=';
                                break;

                            default:
                                throw new \Exception('currently not implemented filter type: "' . $rule['operator'] . '"');
                                break;
                        }

                        $styleString .= 'if(row.'.$colString.' ' . $operator . ' \''. $rule['value'] . '\'){';
                        $styleString .= $css;
                        $styleString .= '}';
                    }
                } else{
                    $styleString .= $css;
                }
                break;
        }
    }
}

/*
 * Row coloring
 */
foreach($this->rowStyles as $style){
    /* @var $style \ZfcDatagrid\Column\Style\AbstractStyle */

    $css = '';
    $cssClass = '';
    
    switch (get_class($style)) {

        case 'ZfcDatagrid\Column\Style\Bold':
            $css = '\'font-weight\', \'bold\'';
            break;

        case 'ZfcDatagrid\Column\Style\Italic':
            $css = '\'font-style\', \'italic\'';
            break;
        
        case 'ZfcDatagrid\Column\Style\Strikethrough':
            $css = '\'text-decoration\', \'line-through\'';
            break;

        case 'ZfcDatagrid\Column\Style\Color':
            $css = '\'color\', \'#' . $style->getRgbHexString().'\'';
            break;

        case 'ZfcDatagrid\Column\Style\BackgroundColor':
            $css = '\'background-color\', \'#' . $style->getRgbHexString().'\'';
            break;
        
        case 'ZfcDatagrid\Column\Style\Align':
            $css = '\'text-align\'' . $style->getAlignment();
            break;
            
        case 'ZfcDatagrid\Column\Style\CSSClass':
            $cssClass = $style->getClass();
            break;

        default:
            throw new \Exception('Not defined yet: "' . get_class($style) . '"');
            break;
    }
    
    if($css != ''){
        $css = '$(\'#\' + row.idConcated).find(\'td\').css('.$css.');';
    }
    
    if($cssClass != ''){
        $cssClass = '$(\'#\' + row.idConcated).find(\'td\').addClass(\'' . $cssClass . '\');';
    }

    if ($style->hasByValues() === true) {
        foreach ($style->getByValues() as $rule) {
            $colString = $rule['column']->getUniqueId();
            $operator = '';
            switch ($rule['operator']) {

                case Filter::EQUAL:
                    $operator = '==';
                    break;

                case Filter::NOT_EQUAL:
                    $operator = '!=';
                    break;

                default:
                    throw new \Exception('currently not implemented filter type: "' . $rule['operator'] . '"');
                    break;
            }

            $styleString .= 'if(row.'.$colString.' ' . $operator . ' \''. $rule['value'] . '\'){';
            if($css != ''){
                $styleString .= $css;
            }
            if($cssClass != ''){
                $styleString .= $cssClass;
            }
            $styleString .= '}';
        }
    }  else{
        if($css != ''){
            $styleString .= $css;
        }
        if($cssClass != ''){
            $styleString .= $cssClass;
        }
    }
}

$itemCountPerPage = $paginator->getItemCountPerPage();
if($paginator->getItemCountPerPage() === $paginator->getTotalItemCount()){
    //@see http://stackoverflow.com/questions/1237096/how-to-show-all-rows-in-the-jqgrid
    $itemCountPerPage = -1;
}
?>
<?php echo $this->partial($this->templateToolbar);?>

<table id="<?php echo $this->gridId; ?>" class="<?php echo implode(' ', $tableClasses); ?>"></table>
<?php echo $this->partial('zfc-datagrid/renderer/jqGrid/footer'); ?>

<iframe name="<?php echo $this->gridId; ?>_fileFrame" id="<?php echo $this->gridId; ?>_fileFrame" src="about:none" style="display: none;"></iframe>


<script>
<?php $this->inlineScript()->captureStart(); ?>

myDefaultSearch = "cn",
getColumnIndexByName = function (columnName) {
    var cm = $(this).jqGrid("getGridParam", "colModel"), i, l = cm.length;
    for (i = 0; i < l; i += 1) {
        if (cm[i].name === columnName) {
            return i; // return the index
        }
    }
    return -1;
},

modifySearchingFilter = function (separator) {
    var i, l, rules, rule, parts, j, group, str, iCol, cmi, cm = this.p.colModel,
        filters = this.p.postData.filters === undefined ? null : $.parseJSON(this.p.postData.filters);
    if (filters && filters.rules !== undefined && filters.rules.length > 0) {
        rules = filters.rules;
        for (i = 0; i < rules.length; i++) {
            rule = rules[i];
            iCol = getColumnIndexByName.call(this, rule.field);
            cmi = cm[iCol];
            if (iCol >= 0 &&
                ((cmi.searchoptions === undefined || cmi.searchoptions.sopt === undefined)
                && (rule.op === myDefaultSearch)) ||
                (typeof (cmi.searchoptions) === "object" &&
                $.isArray(cmi.searchoptions.sopt) &&
                cmi.searchoptions.sopt[0] === rule.op)) {
                // make modifications only for the "contains" operation
                parts = rule.data.split(separator);
                if (parts.length > 1) {
                    if (filters.groups === undefined) {
                        filters.groups = [];
                    }
                    group = {
                        groupOp: "OR",
                        groups: [],
                        rules: []
                    };
                    filters.groups.push(group);
                    for (j = 0, l = parts.length; j < l; j++) {
                        str = parts[j];
                        if (str) {
                            // skip empty "", which exist in case of two separaters of once
                            group.rules.push({
                                data: parts[j],
                                op: rule.op,
                                field: rule.field
                            });
                        }
                    }
                    rules.splice(i, 1);
                    i--; // to skip i++
                }
            }
        }
        this.p.postData.filters = JSON.stringify(filters);
    }
},

dataInitMultiselect = function (elem) {
    setTimeout(function () {
        var $elem = $(elem), id = elem.id,
            inToolbar = typeof id === "string" && id.substr(0, 3) === "gs_",
            options = {
                selectedList: 2,
                height: "auto",
                checkAllText: "all",
                uncheckAllText: "no",
                noneSelectedText: "Any",
                open: function () {
                    var $menu = $(".ui-multiselect-menu:visible");
                    $menu.width("auto");
                    return;
                }
            },
            $options = $elem.find("option");
        if ($options.length > 0 && $options[0].selected) {
            $options[0].selected = false; // unselect the first selected option
        }
        if (inToolbar) {
            options.minWidth = "auto";
        }
        $elem.multiselect(options);
        $elem.siblings("button.ui-multiselect").css({
            width: inToolbar ? "98%" : "100%",
            marginTop: "1px",
            marginBottom: "1px",
            paddingTop: "3px"
        });
    }, 50);
};







//Row background-color + column background-color
function grid_<?php echo $this->gridId; ?>_loadComplete(data){
    if(data.data && data.data.rows){
        $.each(data.data.rows, function(key, row){
            <?php echo $styleString; ?>
        });
    }
}

var grid_<?php echo $this->gridId; ?> = $('#<?php echo $this->gridId; ?>').jqGrid({

	url: '<?php echo $url; ?>',

	caption: '<?php echo $this->title; ?>',

	//width: 'auto',
	//height: '600px',
	//height: 'auto',
	height: function() {
        var wHeight = $(window).height();
        var hHeight = $('.header').height();
        var hlHeight = $('.header-layout').height();
        var tHeight = $('.context-layout .ui-tabs .ui-tabs-nav').height();
        var qHeight = wHeight - hHeight - (hlHeight * 2) - (tHeight * 2);
        var nqHeight = wHeight - (hHeight * 8) - (hHeight / 2);
        return nqHeight;
    }(),
	autowidth : true,
    forceFit : true,
    shrinkToFit : true,
    //shrinkToFit : false,

    gridview : true,
    hoverrows : true,
    viewrecords : true,

    <?php if(count($this->massActions) > 0): ?>
    multiselect: true,
    <?php endif; ?>
    
    grouping: false,

    rownumbers: true,
    rowNum: <?php echo $itemCountPerPage; ?>,
    //rownumWidth: 25, // the width of the row numbers columns

	mtype : '<?= $parameterNames['method']; ?>',

    <?php if ($parametersHtml) : ?>
    postData: { <?php echo implode(',', $parametersHtml); ?>},
    <?php endif; ?>
	
	
	sortname: '<?php echo $this->activeParameters[$parameterNames['sortColumns']]; ?>',
	sortorder: '<?php echo $this->activeParameters[$parameterNames['sortDirections']]; ?>',
	
	prmNames : {
		page: '<?php echo $parameterNames['currentPage']; ?>',
		rows: '<?php echo $parameterNames['itemsPerPage']; ?>',
		sort: '<?php echo $parameterNames['sortColumns']; ?>',
		order: '<?php echo $parameterNames['sortDirections']; ?>',
		search: '<?php echo $parameterNames['isSearch']; ?>',
	},
	
	//pager : '#<?php echo $this->gridId; ?>_pager',

    colModel: <?php echo $this->jqgridColumns($this->columns); ?>,

    datatype : 'local',
    <?php if ($this->data['total']) : ?>
    data: {data: <?php echo json_encode($this->data); ?>},
    <?php endif; ?>

    jsonReader : {
        repeatitems : false,
        id : 'idConcated',

        //The current page
        page : function(data) {
            if (data.data) {
                return data.data.page;
            }
        },

        records : function(data) {
            if (data.data) {
                return data.data.records;
            }
        },

        total : function(data) {
            if (data.data) {
                return data.data.total;
            }
        },

        //Data (rows)
        root : function(data) {
            if (data.data) {
                return data.data.rows;
            }
        }
    },

    <?php if($rowClickLink != ''): ?>
        onSelectRow: function(rowId, status, e){
            $(this).trigger('jqGrid.onSelectRow');
        	var colModel = grid_<?php echo $this->gridId; ?>.jqGrid('getGridParam','colModel');
        	var name = colModel[$.jgrid.getCellIndex(e.target)];
        	var colIndex = name.index;

            var specialColumns = $.parseJSON('<?php echo json_encode($this->columnsRowClickDisabled); ?>');
        	if ($.inArray( colIndex, specialColumns) !== -1 || colIndex === undefined) {
                return false;
            }
            
            var rowClickLink = '<?php echo $rowClickLink; ?>';
            rowClickLink = rowClickLink.replace('<?php echo Button::ROW_ID_PLACEHOLDER; ?>', rowId);
            window.location.href = rowClickLink;
        },
    <?php endif; ?>

    loadComplete: function (data) {
    	//custom pagination
        var paginator = <?php echo $this->gridId; ?>_customPaginator('<?php echo $this->gridId; ?>');
        $('#<?php echo $this->gridId; ?>_pager_center').html(paginator);
    	
        <?php if($styleString != ''): ?>
        if(data !== undefined){
            //on inti we load the first page, but locale type do not know about json data
            grid_<?php echo $this->gridId; ?>_loadComplete(data);
        }
        <?php endif; ?>
        $(this).trigger('jqGrid.loadComplete');
    },
    
    beforeSelectRow: function (rowId, e) {
        $(this).trigger('jqGrid.beforeSelectRow');
        return true;
    },

    beforeRequest: function () {
        $(this).trigger('jqGrid.beforeRequest');
        modifySearchingFilter.call(this, ',');
    }
});
<?php if($this->isUserFilterEnabled === true):?>
//grid_<?php echo $this->gridId; ?>.jqGrid('filterToolbar');
grid_<?php echo $this->gridId; ?>.jqGrid("filterToolbar", {
    stringResult: true,
    searchOnEnter: true,
    defaultSearch: myDefaultSearch,
    beforeClear: function () {
        $(this.grid.hDiv).find(".ui-search-toolbar .ui-search-input>select[multiple] option").each(function () {
            this.selected = false; // unselect all options
        });

        $(this.grid.hDiv).find(".ui-search-toolbar button.ui-multiselect").each(function () {
            $(this).prev("select[multiple]").multiselect("refresh");
        }).css({
            width: "98%",
            marginTop: "1px",
            marginBottom: "1px",
            paddingTop: "3px"
        });
    }
});
<?php endif; ?>

<?php if ($this->data['total']) : ?>
/*
 * The first page is loaded directly without ajax, that's why it's here complicated...
 * @todo find something "smarter"
 */
grid_<?php echo $this->gridId; ?>.jqGrid('setGridParam', {
    datatype : 'json'
}).trigger('reload');
grid_<?php echo $this->gridId; ?>.jqGrid()[0].addJSONData(grid_<?php echo $this->gridId; ?>.jqGrid('getGridParam', 'data'));
grid_<?php echo $this->gridId; ?>.trigger('reload');
grid_<?php echo $this->gridId; ?>_loadComplete(grid_<?php echo $this->gridId; ?>.jqGrid('getGridParam', 'data'));

//custom pagination
var paginator = <?php echo $this->gridId; ?>_customPaginator('<?php echo $this->gridId; ?>');
$('#<?php echo $this->gridId; ?>_pager_center').html(paginator);
<?php endif; ?>

<?php $this->inlineScript()->captureEnd(); ?>
</script>